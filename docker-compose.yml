version: '3.8'

services:
  # =============================================================================
  # Database Services
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: alfa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: alfa_db
      POSTGRES_USER: alfa_user
      POSTGRES_PASSWORD: alfa_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - alfa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alfa_user -d alfa_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: alfa-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - alfa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # Application Services
  # =============================================================================

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: development
    container_name: alfa-web
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3002
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - alfa-network
    depends_on:
      - api
    command: npm run dev

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      target: development
    container_name: alfa-api
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://alfa_user:alfa_password@postgres:5432/alfa_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-dev
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    ports:
      - "3001:3001"
      - "3002:3002"  # WebSocket port
    networks:
      - alfa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  worker:
    build:
      context: .
      dockerfile: ./apps/worker/Dockerfile
      target: development
    container_name: alfa-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://alfa_user:alfa_password@postgres:5432/alfa_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    volumes:
      - ./apps/worker:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    networks:
      - alfa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # =============================================================================
  # Development Tools
  # =============================================================================

  prisma-studio:
    image: node:18-alpine
    container_name: alfa-prisma-studio
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://alfa_user:alfa_password@postgres:5432/alfa_db
    volumes:
      - ./apps/api:/app
    ports:
      - "5555:5555"
    networks:
      - alfa-network
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "npm install && npx prisma studio --hostname 0.0.0.0"
    profiles:
      - tools

  # =============================================================================
  # Monitoring & Observability
  # =============================================================================

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: alfa-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - alfa-network
    profiles:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: alfa-prometheus
    restart: unless-stopped
    volumes:
      - ./infra/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - alfa-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: alfa-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3003:3000"
    networks:
      - alfa-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # =============================================================================
  # Testing Services
  # =============================================================================

  postgres-test:
    image: postgres:15-alpine
    container_name: alfa-postgres-test
    restart: unless-stopped
    environment:
      POSTGRES_DB: alfa_test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - alfa-network
    profiles:
      - test

  redis-test:
    image: redis:7-alpine
    container_name: alfa-redis-test
    restart: unless-stopped
    ports:
      - "6380:6379"
    networks:
      - alfa-network
    profiles:
      - test

  # =============================================================================
  # Reverse Proxy (Production-like)
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: alfa-nginx
    restart: unless-stopped
    volumes:
      - ./infra/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - alfa-network
    depends_on:
      - web
      - api
    profiles:
      - production

# =============================================================================
# Networks
# =============================================================================

networks:
  alfa-network:
    driver: bridge
    name: alfa-network

# =============================================================================
# Volumes
# =============================================================================

volumes:
  postgres_data:
    driver: local
    name: alfa-postgres-data
  
  postgres_test_data:
    driver: local
    name: alfa-postgres-test-data
  
  redis_data:
    driver: local
    name: alfa-redis-data
  
  prometheus_data:
    driver: local
    name: alfa-prometheus-data
  
  grafana_data:
    driver: local
    name: alfa-grafana-data